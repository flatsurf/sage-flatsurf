from sage.all import SageObject
from sage.misc.cachefunc import cached_method


# TODO: SaddleConnection should be an element in the space of SaddleConnections or the space of Paths rather?


    def homology(self):
        r"""
        Return a homology class (generated by edges) that is homologous to this saddle connection.

        EXAMPLES::

            sage: from flatsurf import translation_surfaces
            sage: S = translation_surfaces.square_torus()
            sage: connections = list(S.saddle_connections(13))
            sage: connections[-1].homology()
            -2*B[(0, 0)] - 3*B[(0, 1)]

        ::

            sage: from flatsurf import translation_surfaces
            sage: S = translation_surfaces.cathedral(1, 2)
            sage: connections = [connection for connection in S.saddle_connections(13) if connection.is_closed()]
            sage: connections[-1].homology()
            -B[(1, 1)] - 2*B[(1, 2)] - B[(1, 6)] - B[(3, 1)] + B[(3, 7)]

        """
        to_pyflatsurf = self._surface.pyflatsurf()

        connection = to_pyflatsurf(self)

        # TODO: We should probably make pyflatsurf chains and saddle
        # connections proper objects in sage-flatsurf so that they can be
        # mapped through to_pyflatsurf.section()
        chain = connection._connection.chain()

        chain = {
            e.positive().id(): chain[e]
            for e in to_pyflatsurf.codomain()._flat_triangulation.edges()
        }

        from sage.all import ZZ

        chain = {
            (
                [label for label in to_pyflatsurf.codomain().labels() if e in label][0],
                [label for label in to_pyflatsurf.codomain().labels() if e in label][
                    0
                ].index(e),
            ): ZZ(multiplicity)
            for (e, multiplicity) in chain.items()
        }

        from flatsurf.geometry.homology import SimplicialHomology

        homology = SimplicialHomology(to_pyflatsurf.codomain())

        chain = sum(multiplicity * homology(e) for (e, multiplicity) in chain.items())

        return to_pyflatsurf.section()(chain)
